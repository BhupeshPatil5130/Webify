{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 24, "column": 0}, "map": {"version":3,"sources":["file:///Users/bhiupeshpatil/Downloads/Bhupesh/Webify/src/trpc/init.ts"],"sourcesContent":["import { initTRPC } from '@trpc/server';\nimport { cache } from 'react';\nimport superjson from 'superjson';\nexport const createTRPCContext = cache(async () => {\n  /**\n   * @see: https://trpc.io/docs/server/context\n   */\n  return { userId: 'user_123' };\n});\n// Avoid exporting the entire t-object\n// since it's not very descriptive.\n// For instance, the use of a t variable\n// is common in i18n libraries.\nconst t = initTRPC.create({\n  /**\n   * @see https://trpc.io/docs/server/data-transformers\n   */\n  transformer: superjson,\n});\n// Base router and procedure helpers\nexport const createTRPCRouter = t.router;\nexport const createCallerFactory = t.createCallerFactory;\nexport const baseProcedure = t.procedure;"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;;;;AACO,MAAM,oBAAoB,CAAA,GAAA,qMAAA,CAAA,QAAK,AAAD,EAAE;IACrC;;GAEC,GACD,OAAO;QAAE,QAAQ;IAAW;AAC9B;AACA,sCAAsC;AACtC,mCAAmC;AACnC,wCAAwC;AACxC,+BAA+B;AAC/B,MAAM,IAAI,iKAAA,CAAA,WAAQ,CAAC,MAAM,CAAC;IACxB;;GAEC,GACD,aAAa,0IAAA,CAAA,UAAS;AACxB;AAEO,MAAM,mBAAmB,EAAE,MAAM;AACjC,MAAM,sBAAsB,EAAE,mBAAmB;AACjD,MAAM,gBAAgB,EAAE,SAAS","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///Users/bhiupeshpatil/Downloads/Bhupesh/Webify/src/trpc/query-client.ts"],"sourcesContent":["import {\n    defaultShouldDehydrateQuery,\n    QueryClient,\n  } from '@tanstack/react-query';\n  import superjson from 'superjson';\n  export function makeQueryClient() {\n    return new QueryClient({\n      defaultOptions: {\n        queries: {\n          staleTime: 30 * 1000,\n        },\n        dehydrate: {\n          serializeData: superjson.serialize,\n          shouldDehydrateQuery: (query) =>\n            defaultShouldDehydrateQuery(query) ||\n            query.state.status === 'pending',\n        },\n        hydrate: {\n          deserializeData: superjson.deserialize,\n        },\n      },\n    });\n  }"],"names":[],"mappings":";;;AAAA;AAAA;AAIE;;;AACO,SAAS;IACd,OAAO,IAAI,6KAAA,CAAA,cAAW,CAAC;QACrB,gBAAgB;YACd,SAAS;gBACP,WAAW,KAAK;YAClB;YACA,WAAW;gBACT,eAAe,0IAAA,CAAA,UAAS,CAAC,SAAS;gBAClC,sBAAsB,CAAC,QACrB,CAAA,GAAA,2KAAA,CAAA,8BAA2B,AAAD,EAAE,UAC5B,MAAM,KAAK,CAAC,MAAM,KAAK;YAC3B;YACA,SAAS;gBACP,iBAAiB,0IAAA,CAAA,UAAS,CAAC,WAAW;YACxC;QACF;IACF;AACF","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Users/bhiupeshpatil/Downloads/Bhupesh/Webify/src/trpc/routers/_app.ts"],"sourcesContent":["import { z } from 'zod';\nimport { baseProcedure, createTRPCRouter } from '../init';\nexport const appRouter = createTRPCRouter({\n  createAI: baseProcedure\n    .input(\n      z.object({\n        text: z.string(),\n      }),\n    )\n    .query((opts) => {\n      return {\n        greeting: `hello ${opts.input.text}`,\n      };\n    }),\n});\n// export type definition of API\nexport type AppRouter = typeof appRouter;"],"names":[],"mappings":";;;AAAA;AACA;;;AACO,MAAM,YAAY,CAAA,GAAA,mHAAA,CAAA,mBAAgB,AAAD,EAAE;IACxC,UAAU,mHAAA,CAAA,gBAAa,CACpB,KAAK,CACJ,6KAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,MAAM,6KAAA,CAAA,IAAC,CAAC,MAAM;IAChB,IAED,KAAK,CAAC,CAAC;QACN,OAAO;YACL,UAAU,CAAC,MAAM,EAAE,KAAK,KAAK,CAAC,IAAI,EAAE;QACtC;IACF;AACJ","debugId":null}},
    {"offset": {"line": 113, "column": 0}, "map": {"version":3,"sources":["file:///Users/bhiupeshpatil/Downloads/Bhupesh/Webify/src/trpc/server.tsx"],"sourcesContent":["import 'server-only'; // <-- ensure this file cannot be imported from the client\nimport { createTRPCOptionsProxy } from '@trpc/tanstack-react-query';\nimport { cache } from 'react';\nimport { createTRPCContext } from './init';\nimport { makeQueryClient } from './query-client';\nimport { appRouter } from './routers/_app';\n// IMPORTANT: Create a stable getter for the query client that\n//            will return the same client during the same request.\nexport const getQueryClient = cache(makeQueryClient);\nexport const trpc = createTRPCOptionsProxy({\n  ctx: createTRPCContext,\n  router: appRouter,\n  queryClient: getQueryClient,\n});\nexport const caller = appRouter.createCaller(createTRPCContext);"],"names":[],"mappings":";;;;;AAAA,4RAAsB,0DAA0D;AAChF;AACA;AACA;AACA;AACA;;;;;;;AAGO,MAAM,iBAAiB,CAAA,GAAA,qMAAA,CAAA,QAAK,AAAD,EAAE,8HAAA,CAAA,kBAAe;AAC5C,MAAM,OAAO,CAAA,GAAA,sKAAA,CAAA,yBAAsB,AAAD,EAAE;IACzC,KAAK,mHAAA,CAAA,oBAAiB;IACtB,QAAQ,8HAAA,CAAA,YAAS;IACjB,aAAa;AACf;AACO,MAAM,SAAS,8HAAA,CAAA,YAAS,CAAC,YAAY,CAAC,mHAAA,CAAA,oBAAiB","debugId":null}},
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["file:///Users/bhiupeshpatil/Downloads/Bhupesh/Webify/src/app/page.tsx"],"sourcesContent":["//  \"use client\";\n import { useTRPC } from '@/trpc/client';\nimport { caller } from '@/trpc/server';\nimport { useQuery } from '@tanstack/react-query';\nconst Home= async()=> {\n\n\n  const data = await caller.createAI({ text: 'Bhupesh Server' });\n  // const trpc = useTRPC();\n  // const {data}= useQuery(trpc.createAI.queryOptions({ text: 'Bhupesh' }));\n  // // trpc.createAI.queryOptions({ text: 'Hello World' });\n\n  console.log(\"Server Component\");\n  return (\n   <div>\n    {/* <h1>Hello World {JSON.stringify(data)}</h1> */}\n    {JSON.stringify(data)}\n   </div>\n  );\n}\n \nexport default Home; "],"names":[],"mappings":"AAAA,iBAAiB;;;;;AAEjB;;;AAEA,MAAM,OAAM;IAGV,MAAM,OAAO,MAAM,sHAAA,CAAA,SAAM,CAAC,QAAQ,CAAC;QAAE,MAAM;IAAiB;IAC5D,0BAA0B;IAC1B,2EAA2E;IAC3E,0DAA0D;IAE1D,QAAQ,GAAG,CAAC;IACZ,qBACC,8OAAC;kBAEC,KAAK,SAAS,CAAC;;;;;;AAGpB;uCAEe","debugId":null}}]
}